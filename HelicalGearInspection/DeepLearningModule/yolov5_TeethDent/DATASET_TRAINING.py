# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'video.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from PyQt5.QtWidgets import QApplication, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import random
import tempfile
import os
import subprocess
import shutil

def run_python_script(script_directory, script_name):
    script_path = f'{script_directory}\\{script_name}'

    try:
        subprocess.run(['python', script_path], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running {script_name}: {e}")
    except FileNotFoundError:
        print(f"Script {script_name} not found in directory {script_directory}")

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2060, 877)
        MainWindow.setStyleSheet("Background-color:rgb(211, 247, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 1901, 171))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("Background-color:rgb(90, 164, 255);\n"
"font: 75 24pt \"Palatino Linotype\";\n"
"")
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(250, 480, 661, 191))
        self.pushButton.setStyleSheet("Background-color:rgb(162, 182, 255);\n"
"font: 87 20pt \"Segoe UI Black\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.seprate_images)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setEnabled(True)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 220, 671, 191))
        self.pushButton_2.setStyleSheet("font: 87 20pt \"Segoe UI Black\";\n"
"Background-color:rgb(162, 182, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.process_image)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setEnabled(True)
        self.pushButton_3.setGeometry(QtCore.QRect(1050, 230, 661, 191))
        self.pushButton_3.setStyleSheet("font: 87 20pt \"Segoe UI Black\";\n"
"Background-color:rgb(162, 182, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.run_script)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1800, 780, 111, 71))
        self.label_3.setStyleSheet("Background-image:url(:/newPrefix/Downloads/Screenshot (66).png)")
        self.label_3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(":/newPrefix/Downloads/Screenshot (66).png"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1470, 780, 321, 81))
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("font: 75 16pt \"Calibri\";\n"
"\n"
"font: 75 20pt \"Tahoma\";")
        self.label_4.setObjectName("label_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1050, 480, 671, 191))
        self.pushButton_4.setStyleSheet("font: 87 20pt \"Segoe UI Black\";\n"
"Background-color:rgb(162, 182, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.run_yolov5_training)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:48pt;\">DATASET TRAINING SOFTWARE</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "SEPRATE IMAGES"))
        self.pushButton_2.setText(_translate("MainWindow", "UPLOAD IMAGES"))
        self.pushButton_3.setText(_translate("MainWindow", "OPEN ANNOTATION TOOLS"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Add innovations Pvt Ltd</span></p></body></html>"))
        self.pushButton_4.setText(_translate("MainWindow", "START TRANING"))

    def run_script(self):
        script_directory = r'D:\New folder\HelicalGearInspection\HelicalGearInspection\DeepLearningModule\yolov5_TeethDent\Annotation_Tool'
        script_name = 'labelImg.py'
        run_python_script(script_directory, script_name)

    def seprate_images(self):
        # Your code for moving images here

        # Display a message box indicating that the separation has completed
        app = QApplication(sys.argv)
        message_box = QMessageBox()
        message_box.setWindowTitle("Task Complete")
        message_box.setText("Separation has completed.")
        message_box.exec_()

        print("Separation completed.")

        # Add the provided code here
        # Define the source directory (the "anmol" directory)
        source_directory = r"D:\New folder\HelicalGearInspection\HelicalGearInspection\DeepLearningModule\yolov5_TeethDent\datasets"

        # Define the destination directories
        images_directory = os.path.join(source_directory, "images")
        label_directory = os.path.join(source_directory, "label")
        train_images_directory = os.path.join(images_directory, "train")
        val_images_directory = os.path.join(images_directory, "val")
        train_label_directory = os.path.join(label_directory, "train")
        val_label_directory = os.path.join(label_directory, "val")

        # Create destination directories if they don't exist
        os.makedirs(images_directory, exist_ok=True)
        os.makedirs(label_directory, exist_ok=True)
        os.makedirs(train_images_directory, exist_ok=True)
        os.makedirs(val_images_directory, exist_ok=True)
        os.makedirs(train_label_directory, exist_ok=True)
        os.makedirs(val_label_directory, exist_ok=True)

        # Create a temporary directory to avoid conflicts
        temp_dir = tempfile.mkdtemp()

        # Loop through all files in the source directory
        for filename in os.listdir(source_directory):
            source_file_path = os.path.join(source_directory, filename)

            # Check if the file is a text file
            if filename.endswith(".txt"):
                # Copy text files to the temporary directory
                shutil.copy(source_file_path, os.path.join(temp_dir, filename))
            else:
                # Check if the file is a directory (subdirectory)
                if os.path.isdir(source_file_path):
                    continue  # Skip directories

                # Copy image files to the temporary directory
                shutil.copy(source_file_path, os.path.join(temp_dir, filename))

        # List all the image files in the temporary directory
        image_files = [filename for filename in os.listdir(temp_dir) if not filename.endswith(".txt")]

        # Calculate the number of files for the train and val split
        total_files = len(image_files)
        num_train_files = int(0.9 * total_files)
        num_val_files = total_files - num_train_files

        # Randomly shuffle the list of image files
        random.shuffle(image_files)

        # Split the image files into train and val
        train_files = image_files[:num_train_files]
        val_files = image_files[num_train_files:]

        # Copy image files from the temporary directory to the appropriate destination folders (train and val)
        for filename in train_files:
            source_file_path = os.path.join(temp_dir, filename)
            shutil.copy(source_file_path, os.path.join(train_images_directory, filename))

        for filename in val_files:
            source_file_path = os.path.join(temp_dir, filename)
            shutil.copy(source_file_path, os.path.join(val_images_directory, filename))

        # Copy text files from the temporary directory to the appropriate destination folders (train and val)
        txt_files = [filename for filename in os.listdir(temp_dir) if filename.endswith(".txt")]
        train_txt_files = txt_files[:num_train_files]
        val_txt_files = txt_files[num_train_files:]

        for filename in train_txt_files:
            source_file_path = os.path.join(temp_dir, filename)
            shutil.copy(source_file_path, os.path.join(train_label_directory, filename))

        for filename in val_txt_files:
            source_file_path = os.path.join(temp_dir, filename)
            shutil.copy(source_file_path, os.path.join(val_label_directory, filename))

        # Remove the temporary directory
        shutil.rmtree(temp_dir)

        # Remove all images and text files from the source_directory
        for filename in os.listdir(source_directory):
            file_path = os.path.join(source_directory, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)

        # Display a message box indicating that the separation has completed
        app = QApplication(sys.argv)
        message_box = QMessageBox()
        message_box.setWindowTitle("Task Complete")
        message_box.setText("Separation has completed.")
        message_box.exec_()

        print("Separation completed.")
    
    def process_image(self):
        input_folder = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        output_folder = r'D:\New folder\HelicalGearInspection\HelicalGearInspection\DeepLearningModule\yolov5_TeethDent\datasets'

        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        input_files = os.listdir(input_folder)

        for file_name in input_files:
            input_path = os.path.join(input_folder, file_name)

            # Read the image
            img = cv2.imread(input_path)

            if img is not None:
                # Perform perspective transformation
                img = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
                pts1 = np.float32([[0, 445], [1175, 135], [0, 1680], [1150, 1280]]) #cam1
                #pts1 = np.float32([[0, 595], [1180, 175], [0, 1845], [1200, 1505]])#cam2
                pts2 = np.float32([[0,0],[950,0],[0,610],[950,610]])
                M = cv2.getPerspectiveTransform(pts1, pts2)
                dst = cv2.warpPerspective(img, M, (950,610))
                dst = dst[:,100:850]
                dst = cv2.cvtColor(dst, cv2.COLOR_BGR2RGB)

                # Construct the full path of the output image
                output_path = os.path.join(output_folder, file_name)

                # Save the transformed image to the output folder
                cv2.imwrite(output_path, dst)
                print(f"Saved: {output_path}")
            else:
                print(f"Failed to read image: {input_path}")
    def run_yolov5_training(self):
        environment_name = "pytorch"
        directory_path = r"D:\New folder\HelicalGearInspection\HelicalGearInspection\DeepLearningModule\yolov5_TeethDent\yolov5"
        yolov5_training_command = "python train.py --img 640 --batch 16 --epochs 100 --data dataset.yaml --weights yolov5s.pt --cache"
        try:
            # Activate the Anaconda environment
            activate_cmd = f'conda activate {environment_name}'

            # Create a subprocess to open Anaconda prompt, activate the environment, change directory, and execute the YOLOv5 training command
            command = f'start cmd.exe /K "{activate_cmd} && cd /d {directory_path} && {yolov5_training_command}"'
            subprocess.Popen(command, shell=True)
        except Exception as e:
            print(f"An error occurred: {e}")
  


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
